// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nnAfd7uGSka2TBy9ktGmJn
// Component: Agp2S7mRCMGS

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ModeValue, useMode } from "../core/PlasmicGlobalVariant__Mode"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../core/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import plasmic_icon_css from "../icon/plasmic.module.css"; // plasmic-import: nVTL6BvP7Knk1RSNkBbJCm/projectcss
import plasmic_typography_css from "../typography/plasmic.module.css"; // plasmic-import: rs6Egi3bpxgrd3P2FjjZpt/projectcss
import plasmic_button_css from "../button/plasmic.module.css"; // plasmic-import: 4JFyEcvXaxQ6TZ3SJQYzp6/projectcss
import plasmic_menu_item_css from "../menu_item/plasmic.module.css"; // plasmic-import: 2ejMdvJDoJWjwd6DCNSCHJ/projectcss
import plasmic_input_css from "../input/plasmic.module.css"; // plasmic-import: teUZ7d8BEHskoXuvEf1pBj/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: nnAfd7uGSka2TBy9ktGmJn/projectcss
import sty from "./PlasmicSocialIconGroup.module.css"; // plasmic-import: Agp2S7mRCMGS/css

import FaEnvelopeSolidsvgIcon from "./icons/PlasmicIcon__FaEnvelopeSolidsvg"; // plasmic-import: nXWJXksW58vO/icon
import FaLinkedinsvgIcon from "./icons/PlasmicIcon__FaLinkedinsvg"; // plasmic-import: 4WjZ3OI_cTQU/icon
import FaGithubsvgIcon from "./icons/PlasmicIcon__FaGithubsvg"; // plasmic-import: MW1SC5lGUVd2/icon

createPlasmicElementProxy;

export type PlasmicSocialIconGroup__VariantMembers = {
  changeOrientation: "changeOrientation";
  removeIcon: "first" | "second" | "third";
};
export type PlasmicSocialIconGroup__VariantsArgs = {
  changeOrientation?: SingleBooleanChoiceArg<"changeOrientation">;
  removeIcon?: MultiChoiceArg<"first" | "second" | "third">;
};
type VariantPropType = keyof PlasmicSocialIconGroup__VariantsArgs;
export const PlasmicSocialIconGroup__VariantProps = new Array<VariantPropType>(
  "changeOrientation",
  "removeIcon"
);

export type PlasmicSocialIconGroup__ArgsType = {};
type ArgPropType = keyof PlasmicSocialIconGroup__ArgsType;
export const PlasmicSocialIconGroup__ArgProps = new Array<ArgPropType>();

export type PlasmicSocialIconGroup__OverridesType = {
  socialIconBody?: Flex__<"div">;
};

export interface DefaultSocialIconGroupProps {
  changeOrientation?: SingleBooleanChoiceArg<"changeOrientation">;
  removeIcon?: MultiChoiceArg<"first" | "second" | "third">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSocialIconGroup__RenderFunc(props: {
  variants: PlasmicSocialIconGroup__VariantsArgs;
  args: PlasmicSocialIconGroup__ArgsType;
  overrides: PlasmicSocialIconGroup__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "changeOrientation",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.changeOrientation
      },
      {
        path: "removeIcon",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.removeIcon
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    mode: useMode(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"socialIconBody"}
      data-plasmic-override={overrides.socialIconBody}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_core_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        plasmic_icon_css.plasmic_tokens,
        plasmic_typography_css.plasmic_tokens,
        plasmic_button_css.plasmic_tokens,
        plasmic_menu_item_css.plasmic_tokens,
        plasmic_input_css.plasmic_tokens,
        sty.socialIconBody,
        {
          [plasmic_core_css.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),
          [sty.socialIconBodychangeOrientation]: hasVariant(
            $state,
            "changeOrientation",
            "changeOrientation"
          )
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__jxmRw, {
          [sty.freeBoxremoveIcon_first__jxmRwZtMux]: hasVariant(
            $state,
            "removeIcon",
            "first"
          ),
          [sty.freeBoxremoveIcon_third__jxmRwwClB3]: hasVariant(
            $state,
            "removeIcon",
            "third"
          )
        })}
      >
        <PlasmicLink__
          className={classNames(projectcss.all, projectcss.a, sty.link__cHKsI, {
            [sty.linkchangeOrientation__cHKsIlzGam]: hasVariant(
              $state,
              "changeOrientation",
              "changeOrientation"
            ),
            [sty.linkremoveIcon_first__cHKsIZtMux]: hasVariant(
              $state,
              "removeIcon",
              "first"
            ),
            [sty.linkremoveIcon_second__cHKsIymbxj]: hasVariant(
              $state,
              "removeIcon",
              "second"
            ),
            [sty.linkremoveIcon_third__cHKsIwClB3]: hasVariant(
              $state,
              "removeIcon",
              "third"
            )
          })}
          component={Link}
          href={"mailto:alyssa@seventeensierra.com"}
          platform={"nextjs"}
          target={"_blank"}
        >
          <FaEnvelopeSolidsvgIcon
            className={classNames(projectcss.all, sty.svg__ktDNq, {
              [sty.svgremoveIcon_second__ktDNqYmbxj]: hasVariant(
                $state,
                "removeIcon",
                "second"
              )
            })}
            role={"img"}
          />
        </PlasmicLink__>
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__sPBrn, {
          [sty.freeBoxremoveIcon_first__sPBrnZtMux]: hasVariant(
            $state,
            "removeIcon",
            "first"
          ),
          [sty.freeBoxremoveIcon_second__sPBrnYmbxj]: hasVariant(
            $state,
            "removeIcon",
            "second"
          )
        })}
      >
        <PlasmicLink__
          className={classNames(projectcss.all, projectcss.a, sty.link__ihvS, {
            [sty.linkchangeOrientation__ihvSlzGam]: hasVariant(
              $state,
              "changeOrientation",
              "changeOrientation"
            ),
            [sty.linkremoveIcon_first__ihvSZtMux]: hasVariant(
              $state,
              "removeIcon",
              "first"
            ),
            [sty.linkremoveIcon_second__ihvSymbxj]: hasVariant(
              $state,
              "removeIcon",
              "second"
            )
          })}
          component={Link}
          href={"https://www.linkedin.com/company/seventeen-sierra-llc/"}
          platform={"nextjs"}
          target={"_blank"}
        >
          <FaLinkedinsvgIcon
            className={classNames(projectcss.all, sty.svg__ojoLe, {
              [sty.svgremoveIcon_first__ojoLeZtMux]: hasVariant(
                $state,
                "removeIcon",
                "first"
              )
            })}
            role={"img"}
          />
        </PlasmicLink__>
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__aPoJ, {
          [sty.freeBoxremoveIcon_first__aPoJZtMux]: hasVariant(
            $state,
            "removeIcon",
            "first"
          ),
          [sty.freeBoxremoveIcon_third__aPoJwClB3]: hasVariant(
            $state,
            "removeIcon",
            "third"
          )
        })}
      >
        <PlasmicLink__
          className={classNames(projectcss.all, projectcss.a, sty.link__zLvMt, {
            [sty.linkchangeOrientation__zLvMtlzGam]: hasVariant(
              $state,
              "changeOrientation",
              "changeOrientation"
            ),
            [sty.linkremoveIcon_second__zLvMtYmbxj]: hasVariant(
              $state,
              "removeIcon",
              "second"
            ),
            [sty.linkremoveIcon_third__zLvMtwClB3]: hasVariant(
              $state,
              "removeIcon",
              "third"
            )
          })}
          component={Link}
          href={"https://github.com/SeventeenSierra"}
          platform={"nextjs"}
        >
          <FaGithubsvgIcon
            className={classNames(projectcss.all, sty.svg__ejg44)}
            role={"img"}
          />
        </PlasmicLink__>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  socialIconBody: ["socialIconBody"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  socialIconBody: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSocialIconGroup__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSocialIconGroup__VariantsArgs;
    args?: PlasmicSocialIconGroup__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSocialIconGroup__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSocialIconGroup__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSocialIconGroup__ArgProps,
          internalVariantPropNames: PlasmicSocialIconGroup__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSocialIconGroup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "socialIconBody") {
    func.displayName = "PlasmicSocialIconGroup";
  } else {
    func.displayName = `PlasmicSocialIconGroup.${nodeName}`;
  }
  return func;
}

export const PlasmicSocialIconGroup = Object.assign(
  // Top-level PlasmicSocialIconGroup renders the root element
  makeNodeComponent("socialIconBody"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSocialIconGroup
    internalVariantProps: PlasmicSocialIconGroup__VariantProps,
    internalArgProps: PlasmicSocialIconGroup__ArgProps
  }
);

export default PlasmicSocialIconGroup;
/* prettier-ignore-end */
