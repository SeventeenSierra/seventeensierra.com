// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nnAfd7uGSka2TBy9ktGmJn
// Component: 5yj4rTKXiX3F

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: 3BnfwULcRUyf/component

import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../core/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant
import { ModeValue, useMode } from "../core/PlasmicGlobalVariant__Mode"; // plasmic-import: yBTVTgAz2Co9/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import plasmic_icon_css from "../icon/plasmic.module.css"; // plasmic-import: nVTL6BvP7Knk1RSNkBbJCm/projectcss
import plasmic_typography_css from "../typography/plasmic.module.css"; // plasmic-import: rs6Egi3bpxgrd3P2FjjZpt/projectcss
import plasmic_button_css from "../button/plasmic.module.css"; // plasmic-import: 4JFyEcvXaxQ6TZ3SJQYzp6/projectcss
import plasmic_menu_item_css from "../menu_item/plasmic.module.css"; // plasmic-import: 2ejMdvJDoJWjwd6DCNSCHJ/projectcss
import plasmic_input_css from "../input/plasmic.module.css"; // plasmic-import: teUZ7d8BEHskoXuvEf1pBj/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: nnAfd7uGSka2TBy9ktGmJn/projectcss
import sty from "./PlasmicContentHome.module.css"; // plasmic-import: 5yj4rTKXiX3F/css

import FaCircleDotRegularsvgIcon from "../button/icons/PlasmicIcon__FaCircleDotRegularsvg"; // plasmic-import: vG5cW6c7Inr9/icon
import FaArrowRightsvgIcon from "../icon/icons/PlasmicIcon__FaArrowRightsvg"; // plasmic-import: y0748JIbatyk/icon

createPlasmicElementProxy;

export type PlasmicContentHome__VariantMembers = {};
export type PlasmicContentHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicContentHome__VariantsArgs;
export const PlasmicContentHome__VariantProps = new Array<VariantPropType>();

export type PlasmicContentHome__ArgsType = {
  buttonSlot?: React.ReactNode;
  subHeadingSlot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicContentHome__ArgsType;
export const PlasmicContentHome__ArgProps = new Array<ArgPropType>(
  "buttonSlot",
  "subHeadingSlot"
);

export type PlasmicContentHome__OverridesType = {
  homeBody?: Flex__<"div">;
  homeStack?: Flex__<"div">;
  homeHeading?: Flex__<"h1">;
  text?: Flex__<"div">;
  homeSubHeading?: Flex__<"h4">;
  homeButtonStack?: Flex__<"div">;
};

export interface DefaultContentHomeProps {
  buttonSlot?: React.ReactNode;
  subHeadingSlot?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicContentHome__RenderFunc(props: {
  variants: PlasmicContentHome__VariantsArgs;
  args: PlasmicContentHome__ArgsType;
  overrides: PlasmicContentHome__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsohEUf6Jd0EV8(),
    mode: useMode()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"homeBody"}
      data-plasmic-override={overrides.homeBody}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_core_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        plasmic_icon_css.plasmic_tokens,
        plasmic_typography_css.plasmic_tokens,
        plasmic_button_css.plasmic_tokens,
        plasmic_menu_item_css.plasmic_tokens,
        plasmic_input_css.plasmic_tokens,
        sty.homeBody,
        {
          [plasmic_core_css.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          )
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"homeStack"}
        data-plasmic-override={overrides.homeStack}
        hasGap={true}
        className={classNames(projectcss.all, sty.homeStack)}
      >
        <h1
          data-plasmic-name={"homeHeading"}
          data-plasmic-override={overrides.homeHeading}
          className={classNames(projectcss.all, projectcss.h1, sty.homeHeading)}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {
              "Botique Cybersecurity, Emerging Technology and Digital Transformation Consultancy"
            }
          </div>
        </h1>
        <h4
          data-plasmic-name={"homeSubHeading"}
          data-plasmic-override={overrides.homeSubHeading}
          className={classNames(
            projectcss.all,
            projectcss.h4,
            sty.homeSubHeading
          )}
        >
          {renderPlasmicSlot({
            defaultContents:
              "Providing expert advisement, security assessments and application developement",
            value: args.subHeadingSlot,
            className: classNames(sty.slotTargetSubHeadingSlot)
          })}
        </h4>
        <div
          data-plasmic-name={"homeButtonStack"}
          data-plasmic-override={overrides.homeButtonStack}
          className={classNames(projectcss.all, sty.homeButtonStack)}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <Button
                className={classNames("__wab_instance", sty.button__ueU6J)}
                emphasis={["minimal"]}
                endIcon={
                  <FaArrowRightsvgIcon
                    className={classNames(projectcss.all, sty.svg__s9Cro)}
                    role={"img"}
                  />
                }
                foreground={"primary"}
                showEndIcon={true}
              >
                {"See Services"}
              </Button>
            ),
            value: args.buttonSlot
          })}
        </div>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  homeBody: [
    "homeBody",
    "homeStack",
    "homeHeading",
    "text",
    "homeSubHeading",
    "homeButtonStack"
  ],
  homeStack: [
    "homeStack",
    "homeHeading",
    "text",
    "homeSubHeading",
    "homeButtonStack"
  ],
  homeHeading: ["homeHeading", "text"],
  text: ["text"],
  homeSubHeading: ["homeSubHeading"],
  homeButtonStack: ["homeButtonStack"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  homeBody: "div";
  homeStack: "div";
  homeHeading: "h1";
  text: "div";
  homeSubHeading: "h4";
  homeButtonStack: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContentHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContentHome__VariantsArgs;
    args?: PlasmicContentHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContentHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicContentHome__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicContentHome__ArgProps,
          internalVariantPropNames: PlasmicContentHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicContentHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "homeBody") {
    func.displayName = "PlasmicContentHome";
  } else {
    func.displayName = `PlasmicContentHome.${nodeName}`;
  }
  return func;
}

export const PlasmicContentHome = Object.assign(
  // Top-level PlasmicContentHome renders the root element
  makeNodeComponent("homeBody"),
  {
    // Helper components rendering sub-elements
    homeStack: makeNodeComponent("homeStack"),
    homeHeading: makeNodeComponent("homeHeading"),
    text: makeNodeComponent("text"),
    homeSubHeading: makeNodeComponent("homeSubHeading"),
    homeButtonStack: makeNodeComponent("homeButtonStack"),

    // Metadata about props expected for PlasmicContentHome
    internalVariantProps: PlasmicContentHome__VariantProps,
    internalArgProps: PlasmicContentHome__ArgProps
  }
);

export default PlasmicContentHome;
/* prettier-ignore-end */
