// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nnAfd7uGSka2TBy9ktGmJn
// Component: lfIZg1_S09Kg

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import MenuItem from "../../MenuItem"; // plasmic-import: hq-LirU1Now3/component

import { useScreenVariants as useScreenVariantseDj4FTEjj2U } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: EDj4f_tEJJ2U/globalVariant
import { ModeValue, useMode } from "../core/PlasmicGlobalVariant__Mode"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../core/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import plasmic_icon_css from "../icon/plasmic.module.css"; // plasmic-import: nVTL6BvP7Knk1RSNkBbJCm/projectcss
import plasmic_typography_css from "../typography/plasmic.module.css"; // plasmic-import: rs6Egi3bpxgrd3P2FjjZpt/projectcss
import plasmic_button_css from "../button/plasmic.module.css"; // plasmic-import: 4JFyEcvXaxQ6TZ3SJQYzp6/projectcss
import plasmic_menu_item_css from "../menu_item/plasmic.module.css"; // plasmic-import: 2ejMdvJDoJWjwd6DCNSCHJ/projectcss
import plasmic_input_css from "../input/plasmic.module.css"; // plasmic-import: teUZ7d8BEHskoXuvEf1pBj/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: nnAfd7uGSka2TBy9ktGmJn/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: lfIZg1_S09Kg/css

import FaCircleDotRegularsvgIcon from "../menu_item/icons/PlasmicIcon__FaCircleDotRegularsvg"; // plasmic-import: 65g7d6qEN0cd/icon

createPlasmicElementProxy;

export type PlasmicHeader__VariantMembers = {};
export type PlasmicHeader__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeader__VariantsArgs;
export const PlasmicHeader__VariantProps = new Array<VariantPropType>();

export type PlasmicHeader__ArgsType = {
  companyNameSlot?: React.ReactNode;
  menuSlot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicHeader__ArgsType;
export const PlasmicHeader__ArgProps = new Array<ArgPropType>(
  "companyNameSlot",
  "menuSlot"
);

export type PlasmicHeader__OverridesType = {
  root?: Flex__<"div">;
  companyStack?: Flex__<"div">;
  clickableStack?: Flex__<"div">;
  menuGroup?: Flex__<"div">;
};

export interface DefaultHeaderProps {
  companyNameSlot?: React.ReactNode;
  menuSlot?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeader__RenderFunc(props: {
  variants: PlasmicHeader__VariantsArgs;
  args: PlasmicHeader__ArgsType;
  overrides: PlasmicHeader__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseDj4FTEjj2U(),
    mode: useMode(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_core_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        plasmic_icon_css.plasmic_tokens,
        plasmic_typography_css.plasmic_tokens,
        plasmic_button_css.plasmic_tokens,
        plasmic_menu_item_css.plasmic_tokens,
        plasmic_input_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_core_css.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),
          [sty.rootglobal_mode_dark]: hasVariant(globalVariants, "mode", "dark")
        }
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column__xmcn9)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"companyStack"}
          data-plasmic-override={overrides.companyStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.companyStack)}
        >
          {renderPlasmicSlot({
            defaultContents: (
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__drHpb
                )}
                component={Link}
                href={`/`}
                platform={"nextjs"}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__vHmre)}
                  displayHeight={"56px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"160px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/17_s_business_portfolio_website/images/font17Sierrapng.png",
                    fullWidth: 1497,
                    fullHeight: 532,
                    aspectRatio: undefined
                  }}
                />
              </PlasmicLink__>
            ),
            value: args.companyNameSlot,
            className: classNames(sty.slotTargetCompanyNameSlot, {
              [sty.slotTargetCompanyNameSlotglobal_mode_dark]: hasVariant(
                globalVariants,
                "mode",
                "dark"
              )
            })
          })}
        </Stack__>
      </Stack__>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.column__yadBn)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"clickableStack"}
          data-plasmic-override={overrides.clickableStack}
          hasGap={true}
          className={classNames(projectcss.all, sty.clickableStack, {
            [sty.clickableStackglobal_mode_dark]: hasVariant(
              globalVariants,
              "mode",
              "dark"
            )
          })}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"menuGroup"}
            data-plasmic-override={overrides.menuGroup}
            hasGap={true}
            className={classNames(projectcss.all, sty.menuGroup, {
              [sty.menuGroupglobal_mode_dark]: hasVariant(
                globalVariants,
                "mode",
                "dark"
              )
            })}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <MenuItem
                    className={classNames("__wab_instance", sty.menuItem__nEK6)}
                    endIcon={
                      <FaCircleDotRegularsvgIcon
                        className={classNames(projectcss.all, sty.svg__oy6De)}
                        role={"img"}
                      />
                    }
                    link={`/`}
                    startIcon={
                      <FaCircleDotRegularsvgIcon
                        className={classNames(projectcss.all, sty.svg__taY8W)}
                        role={"img"}
                      />
                    }
                  >
                    {"01 - Home"}
                  </MenuItem>
                  <MenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.menuItem__vjpao
                    )}
                    endIcon={
                      <FaCircleDotRegularsvgIcon
                        className={classNames(projectcss.all, sty.svg__rBz7H)}
                        role={"img"}
                      />
                    }
                    link={`/services`}
                    startIcon={
                      <FaCircleDotRegularsvgIcon
                        className={classNames(projectcss.all, sty.svg__fOwpP)}
                        role={"img"}
                      />
                    }
                  >
                    {"02 - Services"}
                  </MenuItem>
                  <MenuItem
                    className={classNames("__wab_instance", sty.menuItem__qhuJ)}
                    endIcon={
                      <FaCircleDotRegularsvgIcon
                        className={classNames(projectcss.all, sty.svg__siSmp)}
                        role={"img"}
                      />
                    }
                    link={`/about`}
                    startIcon={
                      <FaCircleDotRegularsvgIcon
                        className={classNames(projectcss.all, sty.svg__pv3Lo)}
                        role={"img"}
                      />
                    }
                  >
                    {"03 - About"}
                  </MenuItem>
                  <MenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.menuItem__epS7K
                    )}
                    endIcon={
                      <FaCircleDotRegularsvgIcon
                        className={classNames(projectcss.all, sty.svg___0Ftsj)}
                        role={"img"}
                      />
                    }
                    link={`/contact`}
                    startIcon={
                      <FaCircleDotRegularsvgIcon
                        className={classNames(projectcss.all, sty.svg__x100C)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6Spim
                      )}
                    >
                      {"04 - Contact"}
                    </div>
                  </MenuItem>
                </React.Fragment>
              ),
              value: args.menuSlot
            })}
          </Stack__>
        </Stack__>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "companyStack", "clickableStack", "menuGroup"],
  companyStack: ["companyStack"],
  clickableStack: ["clickableStack", "menuGroup"],
  menuGroup: ["menuGroup"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  companyStack: "div";
  clickableStack: "div";
  menuGroup: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeader__VariantsArgs;
    args?: PlasmicHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHeader__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeader__ArgProps,
          internalVariantPropNames: PlasmicHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    companyStack: makeNodeComponent("companyStack"),
    clickableStack: makeNodeComponent("clickableStack"),
    menuGroup: makeNodeComponent("menuGroup"),

    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
