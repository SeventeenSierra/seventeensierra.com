// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nnAfd7uGSka2TBy9ktGmJn
// Component: 384UvZCTAKIp

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { useScreenVariants as useScreenVariantseDj4FTEjj2U } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: EDj4f_tEJJ2U/globalVariant
import { ModeValue, useMode } from "../core/PlasmicGlobalVariant__Mode"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../core/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import plasmic_icon_css from "../icon/plasmic.module.css"; // plasmic-import: nVTL6BvP7Knk1RSNkBbJCm/projectcss
import plasmic_typography_css from "../typography/plasmic.module.css"; // plasmic-import: rs6Egi3bpxgrd3P2FjjZpt/projectcss
import plasmic_button_css from "../button/plasmic.module.css"; // plasmic-import: 4JFyEcvXaxQ6TZ3SJQYzp6/projectcss
import plasmic_menu_item_css from "../menu_item/plasmic.module.css"; // plasmic-import: 2ejMdvJDoJWjwd6DCNSCHJ/projectcss
import plasmic_input_css from "../input/plasmic.module.css"; // plasmic-import: teUZ7d8BEHskoXuvEf1pBj/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: nnAfd7uGSka2TBy9ktGmJn/projectcss
import sty from "./PlasmicContentAbout.module.css"; // plasmic-import: 384UvZCTAKIp/css

createPlasmicElementProxy;

export type PlasmicContentAbout__VariantMembers = {};
export type PlasmicContentAbout__VariantsArgs = {};
type VariantPropType = keyof PlasmicContentAbout__VariantsArgs;
export const PlasmicContentAbout__VariantProps = new Array<VariantPropType>();

export type PlasmicContentAbout__ArgsType = {
  children?: React.ReactNode;
  kickerSlot?: React.ReactNode;
  contentSlot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicContentAbout__ArgsType;
export const PlasmicContentAbout__ArgProps = new Array<ArgPropType>(
  "children",
  "kickerSlot",
  "contentSlot"
);

export type PlasmicContentAbout__OverridesType = {
  aboutBody?: Flex__<"div">;
  aboutStack?: Flex__<"div">;
  aboutHeading?: Flex__<"h1">;
  aboutColumns?: Flex__<"div">;
  kickerColumn?: Flex__<"div">;
  contentColumn?: Flex__<"div">;
};

export interface DefaultContentAboutProps {
  children?: React.ReactNode;
  kickerSlot?: React.ReactNode;
  contentSlot?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicContentAbout__RenderFunc(props: {
  variants: PlasmicContentAbout__VariantsArgs;
  args: PlasmicContentAbout__ArgsType;
  overrides: PlasmicContentAbout__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseDj4FTEjj2U(),
    mode: useMode(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"aboutBody"}
      data-plasmic-override={overrides.aboutBody}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_core_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        plasmic_icon_css.plasmic_tokens,
        plasmic_typography_css.plasmic_tokens,
        plasmic_button_css.plasmic_tokens,
        plasmic_menu_item_css.plasmic_tokens,
        plasmic_input_css.plasmic_tokens,
        sty.aboutBody,
        {
          [plasmic_core_css.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          )
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"aboutStack"}
        data-plasmic-override={overrides.aboutStack}
        hasGap={true}
        className={classNames(projectcss.all, sty.aboutStack)}
      >
        <h1
          data-plasmic-name={"aboutHeading"}
          data-plasmic-override={overrides.aboutHeading}
          className={classNames(
            projectcss.all,
            projectcss.h1,
            sty.aboutHeading
          )}
        >
          {renderPlasmicSlot({
            defaultContents: "About.",
            value: args.children
          })}
        </h1>
        <Stack__
          as={"div"}
          data-plasmic-name={"aboutColumns"}
          data-plasmic-override={overrides.aboutColumns}
          hasGap={true}
          className={classNames(projectcss.all, sty.aboutColumns)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"kickerColumn"}
            data-plasmic-override={overrides.kickerColumn}
            hasGap={true}
            className={classNames(projectcss.all, sty.kickerColumn)}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__m8HJx
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{"I'm "}</React.Fragment>
                    {
                      <span
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.span__lDaOy
                        )}
                      >
                        {"Alyssa"}
                      </span>
                    }
                    <React.Fragment>
                      {
                        ", a seasoned technologist in cyber security and digital transformation."
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
              ),
              value: args.kickerSlot,
              className: classNames(sty.slotTargetKickerSlot)
            })}
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"contentColumn"}
            data-plasmic-override={overrides.contentColumn}
            hasGap={true}
            className={classNames(projectcss.all, sty.contentColumn)}
          >
            {renderPlasmicSlot({
              defaultContents: (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__g6PD
                  )}
                >
                  {
                    "I'm a technologist specializing in cybersecurity and digital transformation. Based in Washington, DC, with roots in Boston, MA, I excel in activities that require high level thinking where simplified results are expected. My experience in emerging technology within regulated industries has driven initiatives at the intersection of innovation and compliance, demonstrating my capability to navigate and lead in challenging landscapes.\n\nWith a diverse career spanning roles from Computer Scientist to Senior Policy Advisor, I leverage my technical expertise and strategic insight to address and solve intricate digital challenges effectively. My approach combines a deep understanding of the technological landscape with a keen awareness of policy implications, positioning me uniquely to bridge the gap between cutting-edge tech solutions and strategic organizational goals."
                  }
                </div>
              ),
              value: args.contentSlot
            })}
          </Stack__>
        </Stack__>
      </Stack__>
    </Stack__>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  aboutBody: [
    "aboutBody",
    "aboutStack",
    "aboutHeading",
    "aboutColumns",
    "kickerColumn",
    "contentColumn"
  ],
  aboutStack: [
    "aboutStack",
    "aboutHeading",
    "aboutColumns",
    "kickerColumn",
    "contentColumn"
  ],
  aboutHeading: ["aboutHeading"],
  aboutColumns: ["aboutColumns", "kickerColumn", "contentColumn"],
  kickerColumn: ["kickerColumn"],
  contentColumn: ["contentColumn"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  aboutBody: "div";
  aboutStack: "div";
  aboutHeading: "h1";
  aboutColumns: "div";
  kickerColumn: "div";
  contentColumn: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContentAbout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContentAbout__VariantsArgs;
    args?: PlasmicContentAbout__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicContentAbout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicContentAbout__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicContentAbout__ArgProps,
          internalVariantPropNames: PlasmicContentAbout__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicContentAbout__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "aboutBody") {
    func.displayName = "PlasmicContentAbout";
  } else {
    func.displayName = `PlasmicContentAbout.${nodeName}`;
  }
  return func;
}

export const PlasmicContentAbout = Object.assign(
  // Top-level PlasmicContentAbout renders the root element
  makeNodeComponent("aboutBody"),
  {
    // Helper components rendering sub-elements
    aboutStack: makeNodeComponent("aboutStack"),
    aboutHeading: makeNodeComponent("aboutHeading"),
    aboutColumns: makeNodeComponent("aboutColumns"),
    kickerColumn: makeNodeComponent("kickerColumn"),
    contentColumn: makeNodeComponent("contentColumn"),

    // Metadata about props expected for PlasmicContentAbout
    internalVariantProps: PlasmicContentAbout__VariantProps,
    internalArgProps: PlasmicContentAbout__ArgProps
  }
);

export default PlasmicContentAbout;
/* prettier-ignore-end */
