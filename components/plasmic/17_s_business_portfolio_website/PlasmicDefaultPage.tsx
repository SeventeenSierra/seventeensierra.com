// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nnAfd7uGSka2TBy9ktGmJn
// Component: fdnfT7X8D3N9

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import Header from "../../Header"; // plasmic-import: lfIZg1_S09Kg/component
import MenuItem from "../../MenuItem"; // plasmic-import: hq-LirU1Now3/component
import Footer from "../../Footer"; // plasmic-import: 4dc5wCf1vU40/component
import Sidebar from "../../Sidebar"; // plasmic-import: fG_a-l8cHLzr/component

import { ModeValue, useMode } from "../core/PlasmicGlobalVariant__Mode"; // plasmic-import: yBTVTgAz2Co9/globalVariant
import { useScreenVariants as useScreenVariantsohEUf6Jd0EV8 } from "../core/PlasmicGlobalVariant__Screen"; // plasmic-import: OhEUf6Jd0eV8/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_core_css from "../core/plasmic.module.css"; // plasmic-import: 3BHMWCYAenCmWb8ThbnzeF/projectcss
import plasmic_semantic_css from "../semantic/plasmic.module.css"; // plasmic-import: dNqcW7FYVqnkjtbdVGjyS8/projectcss
import plasmic_icon_css from "../icon/plasmic.module.css"; // plasmic-import: nVTL6BvP7Knk1RSNkBbJCm/projectcss
import plasmic_typography_css from "../typography/plasmic.module.css"; // plasmic-import: rs6Egi3bpxgrd3P2FjjZpt/projectcss
import plasmic_button_css from "../button/plasmic.module.css"; // plasmic-import: 4JFyEcvXaxQ6TZ3SJQYzp6/projectcss
import plasmic_menu_item_css from "../menu_item/plasmic.module.css"; // plasmic-import: 2ejMdvJDoJWjwd6DCNSCHJ/projectcss
import plasmic_input_css from "../input/plasmic.module.css"; // plasmic-import: teUZ7d8BEHskoXuvEf1pBj/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: nnAfd7uGSka2TBy9ktGmJn/projectcss
import sty from "./PlasmicDefaultPage.module.css"; // plasmic-import: fdnfT7X8D3N9/css

import CircuitBoardsvg2Icon from "./icons/PlasmicIcon__CircuitBoardsvg2"; // plasmic-import: eH8nk5p5De9C/icon
import FaCircleDotRegularsvgIcon from "../menu_item/icons/PlasmicIcon__FaCircleDotRegularsvg"; // plasmic-import: 65g7d6qEN0cd/icon

createPlasmicElementProxy;

export type PlasmicDefaultPage__VariantMembers = {};
export type PlasmicDefaultPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicDefaultPage__VariantsArgs;
export const PlasmicDefaultPage__VariantProps = new Array<VariantPropType>();

export type PlasmicDefaultPage__ArgsType = {
  children?: React.ReactNode;
};
type ArgPropType = keyof PlasmicDefaultPage__ArgsType;
export const PlasmicDefaultPage__ArgProps = new Array<ArgPropType>("children");

export type PlasmicDefaultPage__OverridesType = {
  root?: Flex__<"div">;
  freeBox?: Flex__<"div">;
  reveal?: Flex__<typeof Reveal>;
  header?: Flex__<typeof Header>;
  home?: Flex__<typeof MenuItem>;
  services?: Flex__<typeof MenuItem>;
  about?: Flex__<typeof MenuItem>;
  menuItem?: Flex__<typeof MenuItem>;
  footer?: Flex__<typeof Footer>;
  sidebar?: Flex__<typeof Sidebar>;
};

export interface DefaultDefaultPageProps {
  children?: React.ReactNode;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDefaultPage__RenderFunc(props: {
  variants: PlasmicDefaultPage__VariantsArgs;
  args: PlasmicDefaultPage__ArgsType;
  overrides: PlasmicDefaultPage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    mode: useMode(),
    screen: useScreenVariantsohEUf6Jd0EV8()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_core_css.plasmic_tokens,
        plasmic_semantic_css.plasmic_tokens,
        plasmic_icon_css.plasmic_tokens,
        plasmic_typography_css.plasmic_tokens,
        plasmic_button_css.plasmic_tokens,
        plasmic_menu_item_css.plasmic_tokens,
        plasmic_input_css.plasmic_tokens,
        sty.root,
        {
          [plasmic_core_css.global_mode_dark]: hasVariant(
            globalVariants,
            "mode",
            "dark"
          ),
          [sty.rootglobal_mode_dark]: hasVariant(globalVariants, "mode", "dark")
        }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <CircuitBoardsvg2Icon
          className={classNames(projectcss.all, sty.svg__lRx3Y)}
          role={"img"}
        />
      </div>
      <Reveal
        data-plasmic-name={"reveal"}
        data-plasmic-override={overrides.reveal}
        className={classNames("__wab_instance", sty.reveal)}
        delay={2}
        duration={750}
        triggerOnce={true}
      >
        <div className={classNames(projectcss.all, sty.columns__vZqv)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.column__fnAP)}
          >
            <div className={classNames(projectcss.all, sty.columns__bt9I)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__cyvAk)}
              >
                <Header
                  data-plasmic-name={"header"}
                  data-plasmic-override={overrides.header}
                  className={classNames("__wab_instance", sty.header)}
                  menuSlot={
                    <React.Fragment>
                      <MenuItem
                        data-plasmic-name={"home"}
                        data-plasmic-override={overrides.home}
                        className={classNames("__wab_instance", sty.home)}
                        endIcon={
                          <FaCircleDotRegularsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__a7P2I
                            )}
                            role={"img"}
                          />
                        }
                        link={`/`}
                        startIcon={
                          <FaCircleDotRegularsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___9JfKd
                            )}
                            role={"img"}
                          />
                        }
                      >
                        {"01 - Home"}
                      </MenuItem>
                      <MenuItem
                        data-plasmic-name={"services"}
                        data-plasmic-override={overrides.services}
                        className={classNames("__wab_instance", sty.services)}
                        endIcon={
                          <FaCircleDotRegularsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__y9ByW
                            )}
                            role={"img"}
                          />
                        }
                        link={`/services`}
                        startIcon={
                          <FaCircleDotRegularsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__epwdt
                            )}
                            role={"img"}
                          />
                        }
                      >
                        {"02 - Services"}
                      </MenuItem>
                      <MenuItem
                        data-plasmic-name={"about"}
                        data-plasmic-override={overrides.about}
                        className={classNames("__wab_instance", sty.about)}
                        endIcon={
                          <FaCircleDotRegularsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__bjpZa
                            )}
                            role={"img"}
                          />
                        }
                        link={`/about`}
                        startIcon={
                          <FaCircleDotRegularsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__obcpy
                            )}
                            role={"img"}
                          />
                        }
                      >
                        {"03 - About"}
                      </MenuItem>
                      <MenuItem
                        data-plasmic-name={"menuItem"}
                        data-plasmic-override={overrides.menuItem}
                        className={classNames("__wab_instance", sty.menuItem)}
                        endIcon={
                          <FaCircleDotRegularsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__fGcyV
                            )}
                            role={"img"}
                          />
                        }
                        link={`/contact`}
                        startIcon={
                          <FaCircleDotRegularsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__ct7Fo
                            )}
                            role={"img"}
                          />
                        }
                      >
                        {"04 - Contact"}
                      </MenuItem>
                    </React.Fragment>
                  }
                />
              </Stack__>
            </div>
            <div className={classNames(projectcss.all, sty.columns__uXLtN)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column___9Qu1M)}
              >
                {renderPlasmicSlot({
                  defaultContents: null,
                  value: args.children
                })}
              </Stack__>
            </div>
            <div className={classNames(projectcss.all, sty.columns__fahHi)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.column__kxt1T)}
              >
                <Footer
                  data-plasmic-name={"footer"}
                  data-plasmic-override={overrides.footer}
                  className={classNames("__wab_instance", sty.footer)}
                />
              </Stack__>
            </div>
          </Stack__>
        </div>
      </Reveal>
      <Sidebar
        data-plasmic-name={"sidebar"}
        data-plasmic-override={overrides.sidebar}
        className={classNames("__wab_instance", sty.sidebar)}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "reveal",
    "header",
    "home",
    "services",
    "about",
    "menuItem",
    "footer",
    "sidebar"
  ],
  freeBox: ["freeBox"],
  reveal: [
    "reveal",
    "header",
    "home",
    "services",
    "about",
    "menuItem",
    "footer"
  ],
  header: ["header", "home", "services", "about", "menuItem"],
  home: ["home"],
  services: ["services"],
  about: ["about"],
  menuItem: ["menuItem"],
  footer: ["footer"],
  sidebar: ["sidebar"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  reveal: typeof Reveal;
  header: typeof Header;
  home: typeof MenuItem;
  services: typeof MenuItem;
  about: typeof MenuItem;
  menuItem: typeof MenuItem;
  footer: typeof Footer;
  sidebar: typeof Sidebar;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDefaultPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDefaultPage__VariantsArgs;
    args?: PlasmicDefaultPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDefaultPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDefaultPage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDefaultPage__ArgProps,
          internalVariantPropNames: PlasmicDefaultPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDefaultPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDefaultPage";
  } else {
    func.displayName = `PlasmicDefaultPage.${nodeName}`;
  }
  return func;
}

export const PlasmicDefaultPage = Object.assign(
  // Top-level PlasmicDefaultPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    reveal: makeNodeComponent("reveal"),
    header: makeNodeComponent("header"),
    home: makeNodeComponent("home"),
    services: makeNodeComponent("services"),
    about: makeNodeComponent("about"),
    menuItem: makeNodeComponent("menuItem"),
    footer: makeNodeComponent("footer"),
    sidebar: makeNodeComponent("sidebar"),

    // Metadata about props expected for PlasmicDefaultPage
    internalVariantProps: PlasmicDefaultPage__VariantProps,
    internalArgProps: PlasmicDefaultPage__ArgProps
  }
);

export default PlasmicDefaultPage;
/* prettier-ignore-end */
